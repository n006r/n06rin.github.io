{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"uniteGame.818aa2d9.js","sourceRoot":"..","sourcesContent":["enum COLOR {\n  BLUE = 'blue',\n  GREEN = 'green',\n  ORANGE = 'orange',\n  RED = 'red'\n}\n\nconst colors = [COLOR.BLUE, COLOR.GREEN, COLOR.ORANGE, COLOR.RED];\nconst getRandomColor = () => {\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\n\nclass Cell {\n  neighbors: Cell[];\n\n  master: string;\n  type: COLOR;\n\n  nodeEl: HTMLDivElement;\n\n  onInfectedCallback: () => void;\n\n  constructor(color: COLOR, onInfectedCallback: () => void) {\n    this.type = color;\n    this.master = 'self';\n    this.neighbors = [];\n\n    const node = document.createElement('div');\n    node.classList.add('cell', color);\n\n    // node.style.backgroundColor = color;\n    this.nodeEl = node;\n    this.onInfectedCallback = onInfectedCallback;\n  }\n\n  notifyNeighbors(newType: COLOR, newMaster: string) {\n    this.neighbors.forEach(neighbor => {\n      neighbor.neighborCellUpdated(newType, newMaster);\n    })\n  }\n\n  neighborCellUpdated(newType: COLOR, newMaster: string) {\n    if ((newType === this.type) || this.master === newMaster) {\n      this.update(newType, newMaster);\n    }\n  }\n\n  update(newType: COLOR, newMaster: string) {\n    let updated = false;\n    if (this.master !== newMaster) {\n      this.master = newMaster;\n      this.nodeEl.classList.add('infected');\n      this.onInfectedCallback();\n      updated = true;\n    }\n\n    if (this.type !== newType) {\n      this.nodeEl.classList.replace(this.type, newType);\n      this.type = newType;\n      updated = true;\n    }\n\n    if (updated) {\n      this.notifyNeighbors(newType, newMaster);\n    }\n  }\n}\n\nconst cellGrid: Array<Cell> = [];\n\nconst columns = 13;\nconst rows = 13;\n// const columns = 3;\n// const rows = 3;\n\nconst cellMap = [];\nfor (let row = 0; row < rows; row++) {\n  cellMap[row] = [];\n  for (let column = 0; column < columns; column++) {\n    cellMap[row][column] = getRandomColor();\n  }\n}\n\nlet infectedCount = 0;\nconst onInfected = () => {\n  infectedCount += 1;\n  document.getElementById('infectedCount').innerText = infectedCount + '';\n  const notInfectedCount = cellGrid.length - infectedCount;\n  document.getElementById('notInfectedCount').innerText = notInfectedCount + '';\n\n  if (notInfectedCount === 0) {\n    window.location.reload(false);\n  }\n}\n\nconst cellGridNode = document.getElementById('cellGrid');\ncellGridNode.style.gridTemplateColumns = `repeat(${columns}, auto)`;\ncellGridNode.style.gridTemplateRows = `repeat(${rows}, auto)`;\n\nfor (let row = 0; row < cellMap.length; row++) {\n  for (let column = 0; column < cellMap[row].length; column++) {\n    const cell = new Cell(cellMap[row][column], onInfected);\n    cellGrid.push(cell);\n    cellGridNode.appendChild(cell.nodeEl);\n  }\n}\n\nfor (let row = 0; row < rows; row++) {\n  for (let column = 0; column < columns; column++) {\n    const cell = cellGrid[row * columns + column];\n\n    if (row !== 0) {\n      cell.neighbors.push(cellGrid[(row - 1) * columns + column]);\n    }\n\n    if (row !== rows - 1) {\n      cell.neighbors.push(cellGrid[(row + 1) * columns + column]);\n    }\n\n    if (column !== 0) {\n      cell.neighbors.push(cellGrid[row * columns + column - 1]);\n    }\n\n    if (column !== columns - 1) {\n      cell.neighbors.push(cellGrid[row * columns + column + 1]);\n    }\n  }\n}\n\nconst centerCell = cellGrid[Math.floor(rows * columns / 2)];\n// const centerCell = cellGrid[cellGrid.length - 1];\n\nconst forceUpdatePlayerCell = (newType: COLOR) => {\n  centerCell.update(newType, 'player1');\n}\n\nforceUpdatePlayerCell(centerCell.type);\n\nconst setBlue = () => {\n  forceUpdatePlayerCell(COLOR.BLUE);\n}\nconst setGreen = () => {\n  forceUpdatePlayerCell(COLOR.GREEN);\n}\nconst setOrange = () => {\n  forceUpdatePlayerCell(COLOR.ORANGE);\n}\nconst setRed = () => {\n  forceUpdatePlayerCell(COLOR.RED);\n}\n\ndocument.querySelector('.colorButton button.blue').addEventListener('click', setBlue);\ndocument.querySelector('.colorButton button.green').addEventListener('click', setGreen);\ndocument.querySelector('.colorButton button.orange').addEventListener('click', setOrange);\ndocument.querySelector('.colorButton button.red').addEventListener('click', setRed);\n\ndocument.addEventListener('keydown', ({ code }) => {\n  switch (code) {\n    case 'KeyA': setBlue(); break;\n    case 'KeyS': setGreen(); break;\n    case 'KeyD': setOrange(); break;\n    case 'KeyF': setRed(); break;\n  }\n});\n"]}